#include <stdlib.h>
#include <stdio.h>
#include <math.h>

int prob_node()
{
	double p = 0.5;
	
	int result = (p > ((double) rand()/RAND_MAX));
	
	return result;
}

void build_matrix (int N, int **arrF)
{
	int i = 0;
	int j = 0;
	
	int* arr = (int*) malloc(N*N*sizeof(int)); 
	
	while(i<N)
	{
		while(j<N)
		{
			if(i == j)
			{
				*(arr + i*N + j) = 0;
			}
			else if(prob_node())
			{
				*(arr + i*N + j) = 1 + rand() % 9;
				printf("prob %d\n", *(arr + i*N +j));
			}
			else
			{
				*(arr + i*N + j) = -1;
			}
			j++;
		} 
		i++;
		j=0;
	}
	
	*arrF = arr;
	
}

void print_matrix(int N, int* arr)
{
	int i = 0;
	int j = 0;
	
	i=0;
	j=0;
	
	printf("\n");
	while(i<N)
	{
		while(j<N)
		{
			printf("%d " ,*(arr + i*N + j));
			
			j++;
		}
		printf("\n"); 
		j=0;
		i++;
	}

}

void floyd_matrix(int N, int*arr)
{
	int k = 0;
	int i = 0;
	int j = 0;
	
	int dik = 0;
	int dkj = 0;
	int dc = 0;
	
	while(k<N)
	{
		while(i<N)
		{
			while(j<N)
			{
				if(k != i || k != j)
				{
					if(*(arr + i*N + j) != 0)
					{
						dik = *(arr + i*N + k);
						dkj = *(arr + k*N + j);
						
						if(dik != 100 || dkj != 100)
						{
							dc = dik + dkj;
							
							if(dc < *(arr + i*N +j))
							{
								*(arr + i*N + j) = dc;
							}
						}
					}
				}
				j++;
			}
			j=0;
			i++;
		}
		i=0;
		k++;
		
		printf("k is %d\n",k);
		print_matrix(4,arr);
	}
}


int main()
{
	
	
	int arr[16] = {0,100,3,100,2,0,100,100,100,7,0,1,6,100,100,0};
	
	print_matrix(4,arr);

	floyd_matrix(4,arr);

	print_matrix(4,arr);
	
	return 0;
	
}