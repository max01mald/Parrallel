#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <mpi.h>


int prob_node()
{
        double p = 0.5;

        int result = (p > ((double) rand()/RAND_MAX));

        return result;
}

void build_matrix (int N, int **arrF)
{
        int i = 0;
        int j = 0;

        int* arr = (int*) malloc(N*N*sizeof(int));

        while(i<N)
        {
                while(j<N)
                {
                        if(i == j)
                        {
                                *(arr + i*N + j) = 0;
                        }
                        else if(prob_node())
                        {
                                *(arr + i*N + j) = 1 + rand() % 9;
                                printf("prob %d\n", *(arr + i*N +j));
                        }
                        else
                        {
                                *(arr + i*N + j) = -1;
                        }
                        j++;
                }
                i++;
                j=0;
        }

        *arrF = arr;

}

void print_matrix(int N, int* arr)
{
        int i = 0;
        int j = 0;

        i=0;
        j=0;

        printf("\n");
        while(i<N)
        {
                while(j<N)
                {
                        printf("%d " ,*(arr + i*N + j));

                        j++;
                }
                printf("\n");
                j=0;
                i++;
        }

}

void floyd_matrix(int N, int*arr)
{
        int k = 0;
        int i = 0;
        int j = 0;

        int dik = 0;
        int dkj = 0;
        int dc = 0;

        while(k<N)
        {
                while(i<N)
                {
                        while(j<N)
                        {
                                if(k != i || k != j)
                                {
                                        if(*(arr + i*N + j) != 0)
                                        {
                                                dik = *(arr + i*N + k);
                                                dkj = *(arr + k*N + j);
                                                if(dik != 100 || dkj != 100)
                                                {
                                                        dc = dik + dkj;

                                                        if(dc < *(arr + i*N +j))
                                                        {
                                                                *(arr + i*N + j) = dc;
                                                        }
                                                }
                                        }
                                }
                                j++;
                        }
                        j=0;
                        i++;
                }
                i=0;
                k++;

                printf("k is %d\n",k);
                print_matrix(4,arr);
        }
}

void load(int* arr, int* buff, int N, int i1, int i2, int j1, int j2)
{
        int i = 0;
        int store = j1;

        while(i1<i2)
        {
                while(j1<j2)
                {
                        buff[i] = *(arr + i1 * N + j1);

                        //printf("buff %d : %d\n",i,buff[i]);
                        j1++;
                        i++;
                }
                j1 = store;
                i1++;
        }
}

int main(int argc, char *argv[])
{
        MPI_Comm children;
        MPI_Init(&argc, &argv);

        int arr[16] = {0,100,3,100,2,0,100,100,100,7,0,1,6,100,100,0};
        int P,N,send_size;

        print_matrix(4,arr);

        N = 4;

        printf("Please select an amount of processors:\n");
        printf("-Minimum amount is 4\n");
        printf("-Maximim amount is %d\n",N);

        scanf("%d",&P);

        if(P < 4 || P > N)
        {
                P = N;
                printf("P is now equal N: %d\n", P);
        }

        MPI_Comm_spawn("Slave", MPI_ARGV_NULL, P, MPI_INFO_NULL,0,MPI_COMM_SELF,&children, MPI_ERRCODES_IGNORE);

		send_size = (pow(N,2)/P);

        int i = 0;
        int j = 0;
        int p = (int) sqrt(P);
        int s = 0;

        int* Buff = (int*) malloc(send_size*sizeof(int));

        while(i < p)
        {
                while(j < p)
                {
                        int i1 = i*N / p;
                        int j1 = j*N / p;

                        int i2 = (((i+1)*N)/p);
                        int j2 = (((j+1)*N)/p);

                        load(arr,Buff,N,i1,i2,j1,j2);

                        MPI_Send(&send_size, 1, MPI_INT, s, 0, children);
                        MPI_Send(&P,1,MPI_INT,s,0,children);
                        MPI_Send(Buff, send_size, MPI_INT, s, 0, children);

                        s++;
                        j++;
                }
                j=0;
                i++;
        }

        i=0;
        while(i<P)
        {
                MPI_Recv(&send_size,1,MPI_INT,MPI_ANY_SOURCE, MPI_ANY_TAG,children,MPI_STATUS_IGNORE);
                i++;
        }

        free(Buff);

        MPI_Finalize();
        return 0;

}

